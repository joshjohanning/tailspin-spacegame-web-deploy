trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'
        
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/*Test.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'demo-mslearn-tailspin-azure'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Creates Resource Group, App Plan, and Web App
                
                # Azure Resource Info
                $RG = "tailspin-space-game-rg"
                $Location = "eastus2"
                $Plan = "ASP-tailspinspacegamerg-free"
                $WebApp = "dev-josh-space-game"
                
                # tag info
                $Owner = "WebTeam"
                $CostCenter = "123456"
                $Program = "web"
                $Tags = "Owner=$Owner CostCenter=$CostCenter Program=$Program"
                
                # create resoure group if doesn't exist
                az group create -l $Location -n $RG --tags $Tags
                
                # create app service and webapp if webapp doesn't exist
                $result = az webapp list -g $RG | ConvertFrom-Json
                if ($result.name -ne $WebApp) {
                    write-host "creating app service plan and webapp"
                    az appservice plan create -g $RG -l $Location -n $Plan --sku S1 --tags $Tags --is-linux
                    az webapp create -g $RG -p $Plan -n $WebApp --tags $Tags --runtime '"DOTNETCORE|3.1"'
                    # az webapp deployment slot create -n $WebApp -g $RG --slot swap
                }
                else
                {
                    write-host "web app already created"
                }
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '**/*.zip'
              cleanDestinationFolder: true
              destinationFolder: $(pipeline.workspace)/extract

          - task: ReplaceTokens@1
            inputs:
              sourcePath: '$(pipeline.workspace)/extract'
              filePattern: '**/serviceDependencies.json'
              tokenRegex: '__(\w+)__'
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'demo-mslearn-tailspin-azure'
              appName: 'dev-josh-space-game'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip'
              
  - job: smoketest
    dependsOn: Deploy
    steps:
      - script: curl -I dev-josh-space-game.azurewebsites.net


- stage: 'Prod'
  displayName: 'Deploy to the prod environment'
  dependsOn: Dev
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: prod
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'demo-mslearn-tailspin-azure'
              appType: 'webAppLinux'
              appName: 'josh-space-game'
              deployToSlotOrASE: true
              resourceGroupName: 'tailspin-space-game-rg'
              slotName: 'swap'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip'
            
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'demo-mslearn-tailspin-azure'
              Action: 'Swap Slots'
              WebAppName: 'josh-space-game'
              ResourceGroupName: 'tailspin-space-game-rg'
              SourceSlot: 'swap'